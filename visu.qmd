---
title: "Visualisation des données"
title-block-banner: false
description: | 
  Plusieurs visualisations sont disponibles ici.
# à changer
date: "`r format(Sys.time(), '%d %B, %Y')`"
# Modifier les détails que vous voulez
author:
  - name: "James Roy"
    # Votre site web perso ou github
    url: https://github.com/JJamesRoy
    # les champs d'affiliation sont optionnels, vous pouvez les
    # comment out en ajoutant un # devant.
    affiliation: FAS1002
    affiliation-url: https://FAS1002.github.io/A22
    # changer pour votre propre orcid id
    # https://orcid.org/ pour vous inscrire.
    orcid: 0000-0002-0941-5961

# TRUE == Générer une citation pour cette page précise. Pour enlever, mettre false.
citation: false
# Inclure les références que vous utilisez dans vos rapports. Je conseille Zotero pour construire
# ce fichier ou de connecter RStudio directement pour pouvoir citer avec @nom-de-reference.
bibliography: references.bib
---

```{r, warning = FALSE, message = FALSE}
library(tidyverse)
library(leaflet)
library(gganimate)
library(fs)
library(rgdal)
library(rmapshaper)
library(sp)
library(tools)
library(RColorBrewer)
library(classInt)
library(countrycode)
```

```{r}
path = path("data", "processed")

file_full = path(path, list.files(path))

dat_full = read.csv(file_full)
```

```{r, message = FALSE, cache=TRUE}
URL = "https://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip"

path_map_zip = path("data", "map", "map")

path_map = path("data", "map")

map_name = paste0(path_map_zip, ".zip")

download.file(URL, destfile = map_name)

unzip(map_name, exdir = path_map)

map_files = list.files(path_map)

file.remove(path(path_map, map_files[c(1,2)])) # À optimiser
```

```{r, warning = FALSE, message=FALSE}
path_map_read = path("data", "map")

layer = file_path_sans_ext(list.files(path_map_read))

map = readOGR(dsn = path_map_read,
                   layer = layer[1])


######

dat_map = dat_full %>% select(c("country", "co2_per_gdp", "year")) %>% pivot_wider(names_from = year, values_from = co2_per_gdp)

na_table = dat_map %>% summarise_all(funs(sum(is.na(.)))) 

#Trouver la colonne avec le moins de NA pour avoir la meilleure année

######

dat_map = dat_map %>% pivot_longer(!country, names_to = "year", values_to = "co2_per_gdp") %>% filter(year == 2019) %>% mutate(iso = countrycode(country, "country.name", "iso3c"))

map@data = right_join(dat_map, map@data,
                            by = c("iso" = "ISO3"))


```

```{r, warning = FALSE, message = FALSE}
breaks_qt <- classIntervals(map$co2_per_gdp, n = 9, style = "quantile")
  #Break the variable into quantiles

pal_fun <- colorQuantile("YlOrRd", NULL, n = 9)
  #Create a function for the color palette
p_popup <- paste0("<strong>Émission de CO2 par $ de PIB : </strong>", map$co2_per_gdp)



leaflet() %>%
  addPolygons(data = map,
    stroke = TRUE, color = "black", opacity = 0.2, weight = 1.5,
    fillColor = ~pal_fun(co2_per_gdp),
    fillOpacity = 0.75, smoothFactor = 0.5,
    highlightOptions = highlightOptions(color = "white", weight = 2,
                                        bringToFront = TRUE),
    popup = p_popup) %>%
  addTiles() %>%
  addLegend("bottomright", 
            colors = brewer.pal(9, "YlOrRd"), 
            labels = paste0("up to ", format(breaks_qt$brks[-1], digits = 2)),
            title =  'Émission de CO2 par $ de PIB selon les pays')

```

```{r, message = FALSE, warning = FALSE}
dat_p1 = dat_full %>% 
    group_by(continent, year) %>% 
    mutate(mean = weighted.mean(co2_per_capita, population))

p1 = ggplot(dat_p1, aes(year, mean, color = factor(continent))) +
    geom_line() +
    transition_reveal(year) +
    theme_minimal()
```

```{r, warning = FALSE}
dat_p2 = dat_full %>% 
    group_by(continent, year) %>% 
    summarise(mean = weighted.mean(renewables_share_elec, population, na.rm = TRUE))

p2 = ggplot(dat_p2, aes(continent, mean)) +
    geom_col() +
    transition_time(year) +
    labs(title = "Year: {frame_time}") +
    ease_aes("linear", interval = 0.1) +
    theme_minimal()
# Saut biz de l'afrique en 2000
animate(p2,
        end_pause = 10,
        start_pause = 10)
```

```{r, warning = FALSE}
dat_p3 = dat_full %>% drop_na(Life.expectancy) %>% filter(year >= 1980 & year <2020) %>% group_by(continent, year) %>% mutate(mean = weighted.mean(Life.expectancy, population))

p3 = ggplot(dat_p3, aes(year, Life.expectancy)) +
    geom_point(alpha = 0.5) +
    geom_point(aes(year, mean), color = "red") +
    facet_wrap(~continent) +
    theme_minimal()

p3
```

```{r, warning = FALSE, message = FALSE}
p4 = ggplot(dat_full, aes(gdp_per_capita, Life.expectancy, size = population, color = continent)) +
    geom_point() +
    scale_x_continuous(trans = "log10", labels = scales::dollar_format()) +
    scale_color_viridis_c() +
    scale_size(range = c(1, 8)) +
    guides(size = "none") +
    scale_color_discrete(name = "Continent") +
    labs(x = "PIB par habitant", y = "Espérance de vie", title = "Année: {frame_time}") +
    transition_time(year) +
    shadow_mark(alpha = 0.3, size = 0.5) +
    ease_aes("linear") +
    theme_minimal()

p4
```
